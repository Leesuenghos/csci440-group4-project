// src/components/ConfigExploit.jsx
import React, { useState, useEffect } from 'react'
import { apiPost, apiGet } from '../services/api'

// lowercase comments: form to configure and launch/stop exploits, with defaults from backend
export default function ConfigExploit({ isExploitVisible }) {
    const [module, setModule] = useState('default')
    const [targetIP, setTargetIP] = useState('default')
    const [targetPort, setTargetPort] = useState('default')
    const [options, setOptions] = useState([{ key: 'default', value: 'default' }])
    const [locked, setLocked] = useState(false)
    const [status, setStatus] = useState({ running: false, pid: null, startTime: null, params: null })
    const [error, setError] = useState('')

    // fetch last exploit status on mount to set form defaults
    useEffect(() => {
        async function fetchInitial() {
            try {
                const res = await apiGet('/attack/exploit/status')
                const data = res.data
                setStatus(data)
                if (data.params) {
                    const p = data.params
                    setModule(p.exploitModule || '')
                    setTargetIP(p.targetIP || '')
                    setTargetPort(p.targetPort != null ? String(p.targetPort) : '')
                    if (p.options) {
                        const opts = Object.entries(p.options).map(([k, v]) => ({ key: k, value: v }))
                        setOptions(opts.length ? opts : [{ key: '', value: '' }])
                    }
                    if (data.running) {
                        setLocked(true)
                    }
                }
            } catch { }
        }
        fetchInitial()
    }, [])

    // poll status when locked
    useEffect(() => {
        let interval
        async function fetchStatus() {
            try {
                const res = await apiGet('/attack/exploit/status')
                setStatus(res.data)
            } catch { }
        }
        if (locked) {
            fetchStatus()
            interval = setInterval(fetchStatus, 5000)
        }
        return () => interval && clearInterval(interval)
    }, [locked])

    const handleOptionChange = (i, field, val) => {
        const newOpts = [...options]
        newOpts[i][field] = val
        setOptions(newOpts)
    }
    const addOption = () => setOptions([...options, { key: '', value: '' }])
    const removeOption = i => setOptions(options.filter((_, idx) => idx !== i))

    const handleSubmit = async e => {
        e.preventDefault()
        setError('')
        if (!module.trim() || !targetIP.trim()) {
            return setError('module & target required')
        }
        const optObj = options.reduce((acc, { key, value }) => key ? { ...acc, [key]: value } : acc, {})
        try {
            if (!locked) {
                await apiPost('/attack/exploit/launch', {
                    exploitModule: module.trim(),
                    targetIP: targetIP.trim(),
                    targetPort: targetPort ? parseInt(targetPort, 10) : undefined,
                    options: optObj
                })
                setLocked(true)
            } else {
                await apiPost('/attack/exploit/stop', {})
                setLocked(false)
            }
        } catch {
            setError(locked ? 'failed to stop exploit' : 'failed to launch exploit')
        }
    }

    if (!isExploitVisible) return null

    return (
        <form className="exploit-config" onSubmit={handleSubmit}>
            {error && <p className="error">{error}</p>}
            <div className="exploit-settings">
                <div className="exploit-field">
                    <label>exploit module:</label>
                    <input
                        value={module}
                        onChange={e => setModule(e.target.value)}
                        disabled={locked}
                    />
                </div>
                <div className="exploit-field">
                    <label>target ip:</label>
                    <input
                        value={targetIP}
                        onChange={e => setTargetIP(e.target.value)}
                        disabled={locked}
                    />
                </div>
                <div className="exploit-field">
                    <label>target port:</label>
                    <input
                        value={targetPort}
                        onChange={e => setTargetPort(e.target.value)}
                        disabled={locked}
                    />
                </div>
                <div className="exploit-field">
                    <label>options:</label>
                    {options.map((opt, i) => (
                        <div key={i} className="exploit-option-row">
                            <input
                                placeholder="key"
                                value={opt.key}
                                onChange={e => handleOptionChange(i, 'key', e.target.value)}
                                disabled={locked}
                            />
                            <input
                                placeholder="value"
                                value={opt.value}
                                onChange={e => handleOptionChange(i, 'value', e.target.value)}
                                disabled={locked}
                            />
                            {!locked && (
                                <button
                                    type="button"
                                    className="option-button"
                                    onClick={() => removeOption(i)}
                                >
                                    x
                                </button>
                            )}
                        </div>
                    ))}
                    {!locked && (
                        <button type="button" className="option-button" onClick={addOption}>
                            add option
                        </button>
                    )}
                </div>
            </div>

            <div className="exploit-status">
                <div className="exploit-status-row">
                    <p>running:</p><p>{status.active ? 'yes' : 'no'}</p>
                </div>
                <div className="exploit-status-row">
                    <p>pid:</p><p>{status.pid || 'N/A'}</p>
                </div>
                <div className="exploit-status-row">
                    <p>since:</p><p>{status.startTime ? new Date(status.startTime).toLocaleString() : 'N/A'}</p>
                </div>
                <div className="exploit-status-row">
                    <p>command:</p><p>{status.command || 'N/A'}</p>
                </div>
            </div>

            <div className="exploit-submit">
                <button className="exploit-button" type="submit">
                    {locked ? 'unlock & stop exploit' : 'lock & launch exploit'}
                </button>
            </div>
        </form>
    )
}